**📚 개발 도서 스터디 템플릿**

# **🧠 1. 책을 읽기 전에**

비동기 ⇒ 벼르고 있었습니다 제대로 모시겠습니다

---

# **📂 2. 내용 정리**

[4장 공부내용](https://github.com/The-CataCombs/TechBooks/blob/main/%EB%AF%BC%EC%84%A0/%EA%B3%B5%EB%B6%80%EB%82%B4%EC%9A%A9/4%EC%9E%A5)

# **💬 3. 이야기하고 싶은 질문 / 포인트**

> 읽으며 생긴 의문, 확인하고 싶은 개념, 비판하고 싶은 주장 등을 적습니다.
> 

### 공부내용(대부분 안드로메다)에 넣어보았습니다…

[6장_안드로메다](https://github.com/The-CataCombs/TechBooks/blob/main/%EB%AF%BC%EC%84%A0/%EA%B3%B5%EB%B6%80%EB%82%B4%EC%9A%A9/6%EC%9E%A5_%EC%95%88%EB%93%9C%EB%A1%9C%EB%A9%94%EB%8B%A4)

<aside>
🧐

### Re-entrant = Re + Entrant

"다시 들어갈 수 있는”

영어단어 그자체를 이해하는게 아니면 기억에 잘 남지 않아요…

같은 사람(스레드)은 자신이 이미 가지고 있는 락을 부담 없이 다시 사용할 수 있다!

### ❌ 재진입 불가능한 락 (가상의 예시)

```jsx
// 이런 락이 있다면...
SimpleLock lock = new SimpleLock();

public void 엄마가_요리하기() {
    lock.lock();  // 부엌 점유
    try {
        재료_준비하기();
        조미료_가져오기();  // 이 메서드도 부엌을 써야 함
    } finally {
        lock.unlock();
    }
}

public void 조미료_가져오기() {
    lock.lock();  // 💥 데드락! 엄마가 이미 부엌을 쓰고 있는데 
                  //    엄마 자신이 다시 부엌에 들어가려고 함
    try {
        소금_가져오기();
    } finally {
        lock.unlock();
    }
}
```

### ✅ 재진입 가능한 락 (ReentrantLock)

```java

ReentrantLock lock = new ReentrantLock();

public void 엄마가_요리하기() {
    lock.lock();  // 부엌 점유 (카운트: 1)
    try {
        재료_준비하기();
        조미료_가져오기();  // 같은 사람(스레드)이니까 들어갈 수 있음
    } finally {
        lock.unlock();  // 카운트: 0, 실제로 부엌 비움
    }
}

public void 조미료_가져오기() {
    lock.lock();  // ✅ 성공! 엄마니까 들어갈 수 있음 (카운트: 2)
    try {
        소금_가져오기();
    } finally {
        lock.unlock();  // 카운트: 1, 아직 엄마가 부엌 사용 중
    }
}
```

애초에 왜 재진입을 해야하는데…? 싶어서 찾아본

### 재진입을 해야하는 경우의 수

### 1. **메서드 체인 호출**

```java

public void 큰일_처리하기() {
    lock.lock();
    try {
        작은일1_하기();// 이것도 락이 필요
        작은일2_하기();// 이것도 락이 필요
        작은일3_하기();// 이것도 락이 필요
    } finally {
        lock.unlock();
    }
}

```

### 2. **재귀 함수**

```java

public void 폴더_정리하기(Folder folder) {
    lock.lock();
    try {
        파일_정리하기(folder);
        for (Folder 하위폴더 : folder.getSubFolders()) {
            폴더_정리하기(하위폴더);// 재귀 호출!
        }
    } finally {
        lock.unlock();
    }
}

```

### 3. **콜백 함수**

```java

public void 이벤트_처리하기() {
    lock.lock();
    try {
// 이벤트 처리 중에 콜백이 호출될 수 있음
        콜백함수_호출();// 이 함수가 다시 락을 요청할 수 있음
    } finally {
        lock.unlock();
    }
}

```

</aside>

### **🎯 4. 정리 & 적용 아이디어**

- **내가 배운 것 한 줄 요약**:→ `이 장을 통해 나는 _동시성 문제와 해결 방법들_을 이해했다.`

우리 서비스에서 동시성 문제가 발생할만한 게 없는 것 같습니다

---

**🌟 5. 전체 리뷰**

- **별점 평가** (⭐️ 5점 만점): `⭐️⭐️⭐️⭐️⭐️`
- **이번 챕터에 대한 총평**:
    - 동시성 문제와 다양한 해결 방법들을 알게되어 시야가 넓어진 것 같다!
    - 물론 꽤나 어렵고 다양해서 공부를 더 열심히 해봐야 할 것 같다
    - 실전 적용.. 할 수 있을까?
