# **📚 개발 도서 스터디 템플릿**

# **🧠 1. 책을 읽기 전에**

외부서비스 장애 영향 최소화하기 ⇒ 생각 안 해본 부분이라 재미있을 것 같았다!

---

# **📂 2. 내용 정리**

[4장 공부내용](https://github.com/The-CataCombs/TechBooks/blob/main/%EB%AF%BC%EC%84%A0/%EA%B3%B5%EB%B6%80%EB%82%B4%EC%9A%A9/4%EC%9E%A5)

# **💬 3. 이야기하고 싶은 질문 / 포인트**

> 읽으며 생긴 의문, 확인하고 싶은 개념, 비판하고 싶은 주장 등을 적습니다.
> 

### 동시요청제한

서비스가 처리할 수 있는 만큼만 받고 나머지는 에러 리턴 ⇒ 면접에서 뒷걸음질하다 뭣 잡은 격으로 문제상황 해결책 말하라길래 즉석으로 맞춰보았다…

<aside>
🧐

### **벌크헤드(Bulkhead) 패턴**

장애가 발생했을 때 그 영향이 전체 시스템으로 퍼지는 것을 방지하기 위해 **시스템을 여러 독립적인 부분으로 격리**하는 설계 패턴

## 벌크헤드(Bulkhead) 의미

- 원래 **배**에서 사용하는 용어
- 배 내부를 여러 개의 독립된 구역으로 나눠서, 특정 구역에 물이 차더라도 다른 구역으로 침수가 퍼지지 않게 막는 벽 ⇒ **벌크헤드(Bulkhead)**

---

## 💡 소프트웨어에서의 벌크헤드 패턴 특징

- 전체 시스템을 작은 독립적인 단위(벌크헤드)로 나눠서 관리
- 각 벌크헤드는 자신만의 **리소스**(스레드 풀, DB 커넥션 등)를 독립적으로 가지고 있음
- 한 벌크헤드에서 장애나 병목이 발생하더라도 다른 벌크헤드는 정상 작동하도록 보호

---

## ✅ 벌크헤드 패턴을 사용하는 이유

- **장애 격리 (Fault Isolation)**
    - 하나의 서비스가 문제가 생겼을 때 전체 시스템이 마비되지 않게 막아줌
- **리소스 보호 (Resource Protection)**
    - 특정 서비스가 과도하게 리소스를 소모하더라도 다른 서비스의 리소스를 침범하지 못함
- **서비스 안정성 향상 (Reliability)**
    - 장애가 국지화되어 빠르게 회복 가능
</aside>

### 외부 연동에 실패했을때 트랜잭션을 롤백

⇒ 타임아웃으로 실패했지만 내부적으로는 성공했을때 보정

⇒ 내가 외부 연동을 해본 경험은 단순히 조회였어서 외부연동 후 상태가 변경되는 경우를 생각해본 적이 없어서 새로웠다!

<aside>
🧐

- 보정 방법
    - 매일 전날 포인트 사용내역 비교해 불일치 건이 있으면 수동/자동으로 보정
    - 성공 확인 API를 호출, 성공 응답이 오면 트랜잭션 지속, 실패 응답이 오면 트랜잭션 롤백
</aside>

### 외부 연동은 성공했지만 DB 연동에 실패해 트랜잭션을 롤백

에서 특히 흥미로웠던 내용

<aside>
🧐

### 외부 연동이 느려질때 DB 커넥션 풀 문제

트랜잭션 안에 외부연동이 포함되어있어서 커넥션 오래 점유해서 생기는 문제
무관하다면 트랜잭션 분리하기!!! ⇒ 내가 저번에 생각했던 것!!!
[3장 공부내용](https://github.com/The-CataCombs/TechBooks/blob/main/%EB%AF%BC%EC%84%A0/%EA%B3%B5%EB%B6%80%EB%82%B4%EC%9A%A9/3%EC%9E%A5)
여기의 마지막내용...

이번에는 전으로 분리도 하고 후로 분리도 하는 케이스가 있음

⇒ DB트랜잭션 후로 외부연동 분리시: 트랜잭션 커밋 이후 외부 연동이 실패한다면 실패한 외부 연동 후처리 방안이 있어야 함

### 후처리 방안

- 보상 트랜잭션 : 트랜잭션으로 반영된 데이터 되돌림
- 데이터 후보정

일반적으로 실무에서는 두 번째 방법인 **데이터 후보정 방식**을 많이 쓴다고 함, 이유는

- 구현이 간단
- 외부 API 장애 시 서비스 전체가 멈추지 않고 유연하게 대응 가능
- 후속 배치처리 및 관리로 장애 상황도 관리하기 편함

(금융 시스템등 일관성이 매우 중요한 경우 보상 트랜잭션이 필요)

### 추가 고려사항

- **비동기 큐(Message Queue, Kafka 등)** 를 활용
    - 트랜잭션 완료 후 메시지 큐에 메시지를 넣고 외부 API 호출은 별도 서비스가 처리
    - 장애 처리, 재시도 로직을 큐에서 편리하게 관리

</aside>

## HTTP 커넥션 풀

⇒ 처음 본 개념인데 효율적이고 좋다! DB도 커넥션 풀이 있는데 왜 HTTP도 있을거란 생각을 못했지!

<aside>
🧐

- 커넥션 풀은 클라이언트가 관리하고 유지 ⇒ 우리서버에서 다른서버로 요청: 우리서버가 클라
- 커넥션 풀은 우리 서버에서 생성, 유지, 관리
- 자바 기반) Apache HttpClient, OkHttp, WebClient 등으로 커넥션 풀 설정
- HTTP 클라이언트가 외부 서버와 통신할 때, 매번 새로운 커넥션을 만드는 건 비용이 큼
- 따라서 미리 만들어놓은 커넥션을 재사용하는 방식이 바로 커넥션 풀

## 1) Apache HttpClient 예시

```java
PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
cm.setMaxTotal(200); // 전체 최대 커넥션 수
cm.setDefaultMaxPerRoute(20); // 하나의 호스트당 최대 커넥션 수

CloseableHttpClient client = HttpClients.custom()
    .setConnectionManager(cm)
    .build();
```

## (2) Spring의 RestTemplate + Apache HttpClient 예시

```java
PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
cm.setMaxTotal(100);
cm.setDefaultMaxPerRoute(10);

CloseableHttpClient httpClient = HttpClients.custom()
    .setConnectionManager(cm)
    .build();

HttpComponentsClientHttpRequestFactory factory =
    new HttpComponentsClientHttpRequestFactory(httpClient);
factory.setConnectTimeout(5000); // 연결 타임아웃
factory.setReadTimeout(5000);    // 읽기(소켓) 타임아웃

RestTemplate restTemplate = new RestTemplate(factory);
```

## (3) OkHttp 예시

```java
java
CopyEdit
ConnectionPool connectionPool = new ConnectionPool(20, 5, TimeUnit.MINUTES);
// 최대 20개 커넥션, 5분간 idle 커넥션 유지

OkHttpClient client = new OkHttpClient.Builder()
    .connectionPool(connectionPool)
    .connectTimeout(5, TimeUnit.SECONDS)
    .readTimeout(5, TimeUnit.SECONDS)
    .writeTimeout(5, TimeUnit.SECONDS)
    .callTimeout(10, TimeUnit.SECONDS) // 전체 요청시간 타임아웃
    .build();
```

---

## (4) Spring WebClient (Reactor Netty) 예시

```java
HttpClient httpClient = HttpClient.create(ConnectionProvider.builder("custom")
        .maxConnections(100)                 // 최대 커넥션 수
        .pendingAcquireTimeout(Duration.ofSeconds(60)) // 연결 대기 타임아웃
        .maxIdleTime(Duration.ofSeconds(20)) // idle 커넥션 유지 시간
        .build())
    .responseTimeout(Duration.ofSeconds(10)); // 전체 응답 타임아웃

WebClient webClient = WebClient.builder()
    .clientConnector(new ReactorClientHttpConnector(httpClient))
    .build();
```

⇒ 느낀점 : 역시 Netty를 공부하긴 해야겠다

저번 고도화 프로젝트에서 팀 합류 후에 첫 업무가 RestTemplate 으로 외부 연동 부분 구현하는 거였는데 이걸 먼저 읽었다면 HTTP 커넥션 풀을 적용할걸…하는 후회가 남는다

역시 알수록 보이는게 많아짐…

</aside>

### **🎯 4. 정리 & 적용 아이디어**

- **내가 배운 것 한 줄 요약**:→ `이 장을 통해 나는 _연동서비스관련발생가능문제_을 이해했다.`

RestTemplate 으로 외부 연동 부분 구현했던 부분에 HTTP 커넥션 풀을 적용하고싶다…너무나도…

---

**🌟 5. 전체 리뷰**

- **별점 평가** (⭐️ 5점 만점): `⭐️⭐️⭐️⭐️⭐️`
- **이번 챕터에 대한 총평**:
    - 연동서비스에서 난 장애의 영향을 최소화하는 여러가지 방법과 패턴을 알게되어서 시야가 조금은 더 넓어진 것 같다!
    - 다음에 설계하고 개발할때는 조금 더 넓은 시야로 볼 수 있게 성장한 것 같다!
    - 역시 읽고 나름대로 생각을 해야 성장을 할 수 있는 것 같다
